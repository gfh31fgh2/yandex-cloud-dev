#cloud-config
ssh_pwauth: no
users:
  - name: xxxuser
    groups: sudo
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    ssh_authorized_keys:
      - "ssh-rsa AAx xx@xxx.ru"
package_update: true
package_upgrade: true
package_reboot_if_required: true
packages:
  - htop
  - syslinux-utils
  - build-essential
  - software-properties-common
  - wget
  - autoconf
  - cron
  - iputils-ping
  - dpkg-dev
  - zip
  - unzip
  - curl
  - rsync
  - ntp
  - git
  - ssh
  - nano
  - bc
  - locales
  - net-tools
  - libpng-dev
  - libicu-dev
  - libxml2-dev
  - libpq-dev
  - libjpeg-dev
  - libfreetype6-dev
  - libssl-dev
  - libzip-dev
  - libmcrypt-dev
  - libwebp-dev
  - libgd-dev
  - libxpm-dev
  - zlib1g-dev
  - php8.1-fpm
  - php8.1-cli
  - php8.1-gd
  - php8.1-intl
  - php8.1-zip
  - php8.1-mysqli
  - php8.1-pdo
  - php8.1-mbstring
  - php8.1-exif
  - php8.1-bcmath
  - php8.1-xml
  - php8.1-ldap
  - php8.1-sockets
  - php8.1-opcache
  - php8.1-curl
  - php8.1-dev
  # - php8.1-grpc
  - php-pear
  - php8.1-gmp
  - php8.1-soap
  - php8.1-iconv
  - nginx
  - golang-go
  - nfs-common
  # - supervisor
write_files:
  - content: |
      server {
        listen 80;
        listen 443;
        server_name xxxfront;
        root /home/www/xxxfront/releases/now;

        # root lvl
        location / {
          root /home/www/xxxfront/releases/now;
          index index.php index.html;
          if (!-e $request_filename) {
            rewrite ^(/.*)$ /index.php?q=$1 last;
            break;
          }
        }

        # redirect from www
        if ($host ~* www\.(.*)) {
          set $host_without_www $1;
          rewrite ^(.*)$ http://$host_without_www$1 permanent;
        }

        # for health
        location = /health.php {
          log_not_found off;
          access_log off;
          root /home/www/xxxfront/releases/now;
          #fastcgi_pass xxphp:9000;
          fastcgi_pass unix:/run/php/php8.1-fpm.sock;
          fastcgi_hide_header X-Powered-By;
          fastcgi_index index.php;
          fastcgi_param DOCUMENT_ROOT /home/www/xxxfront/releases/now;
          fastcgi_param SCRIPT_FILENAME /home/www/xxxfront/releases/now$fastcgi_script_name;
          fastcgi_param PATH_TRANSLATED /home/www/xxxfront/releases/now$fastcgi_script_name;
          include fastcgi_params;
        }

        # work with other php files
        location ~ ^/.*\.php$ {
          root /home/www/xxxfront;
          #include fastcgi_params;
          #fastcgi_pass xxphp:9000;
          fastcgi_pass unix:/run/php/php8.1-fpm.sock;
          fastcgi_hide_header X-Powered-By;
          fastcgi_index index.php;

          fastcgi_param DOCUMENT_ROOT /home/www/xxxfront/releases/now;
          fastcgi_param SCRIPT_FILENAME /home/www/xxxfront/releases/now$fastcgi_script_name;
          fastcgi_param PATH_TRANSLATED /home/www/xxxfront/releases/now$fastcgi_script_name;

          include fastcgi_params;

          fastcgi_param QUERY_STRING $query_string;
          fastcgi_param REQUEST_METHOD $request_method;
          fastcgi_param CONTENT_TYPE $content_type;
          fastcgi_param CONTENT_LENGTH $content_length;
          fastcgi_param AUTH_USER $remote_user;
          fastcgi_param REMOTE_USER $remote_user;
          fastcgi_intercept_errors on;
          fastcgi_ignore_client_abort off;
          fastcgi_connect_timeout 100;
          fastcgi_send_timeout 180;
          fastcgi_read_timeout 180;
          fastcgi_buffer_size 128k;
          fastcgi_buffers 4 256k;
          fastcgi_busy_buffers_size 256k;
          fastcgi_temp_file_write_size 256k;
        }

        # for icon
        location = /favicon.ico {
          log_not_found off;
          access_log off;
        }

        # for robots
        location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
        }

        location = /xmlrpc.php {
          deny  all;
          log_not_found off;
          access_log off;
        }

        # end xxxsss
      }
    path: /home/xxxfront.conf
    owner: root:root
    permissions: '0644'
  - content: |
      #!/bin/bash
      #Usage = sh limit-directory-size.sh 
      # 
      # deleted
      # 
      echo "end delete old logs script!"
    path: /home/delete_old_log_files.sh
    owner: root:root
    permissions: '0755'
  - content: |
      #!/bin/sh -u

      # example:
      # sh put_s3_obj_cli.sh "x/2.txt" "t1/t2.txt"
      #
      # deleted
      #
      
      # thats it
    path: /home/put_s3_obj_cli.sh
    owner: root:root
    permissions: '0755'
  - content: |
      #!/bin/sh -u

      # example:
      # sh all_put_s3_obj_cli.sh "x/2.txt" "t1/t2.txt" "xxxx-bucket"

      #
      # deleted
      #

      # thats it
    path: /home/all_put_s3_obj_cli.sh
    owner: root:root
    permissions: '0755'
  - content: |
      ; Start a new pool named 'www'.
    path: /home/www.conf
    owner: root:root
    permissions: '0644'
  - content: |
      user www-data;
      worker_processes auto;
      pid /run/nginx.pid;
      include /etc/nginx/modules-enabled/*.conf;

      events {
        worker_connections 1024;
        # multi_accept on;
      }

      http {
          map $status $sinfo {
              default 0;
              "200" 1;
              "409" 1;
          }
          map $status $serror {
              default 0;
              "404" 1;
              "500" 1;
              "104" 1;
              "109" 1;
          }
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          log_format  mainone escape=json  ' { "status":"$status", "remote_addr":"$remote_addr", "remote_user":"$remote_user", ' 
                            ' "time_local":"$time_local", "request":"$request", "request_method":"$request_method", '
                            ' "body_bytes_sent":"$body_bytes_sent", "http_referer":"$http_referer", "uri":"$uri", '
                            ' "http_user_agent":"$http_user_agent", "http_x_forwarded_for":"$http_x_forwarded_for", '
                            ' "request_uri":"$request_uri", '
                            ' "log":"$status – $request – $http_user_agent", "xip":"$http_xip", "severity": "info" } ';

          log_format  maintwo escape=json  ' { "status":"$status", "remote_addr":"$remote_addr", "remote_user":"$remote_user", ' 
                            ' "time_local":"$time_local", "request":"$request", "request_method":"$request_method", '
                            ' "body_bytes_sent":"$body_bytes_sent", "http_referer":"$http_referer", "uri":"$uri", '
                            ' "http_user_agent":"$http_user_agent", "http_x_forwarded_for":"$http_x_forwarded_for", '
                            ' "request_uri":"$request_uri", '
                            ' "log":"$status – $request – $http_user_agent", "xxxip":"$http_xip", "severity": "error" } ';
          access_log  /var/log/nginx/access.log  mainone if=$sinfo;
          access_log  /var/log/nginx/access.log  maintwo if=$serror;
          server_tokens off;
          sendfile    on;
          tcp_nopush    on;
          keepalive_timeout 60;
          tcp_nodelay   on;
          client_body_timeout 45;
          gzip    on;
          gzip_vary   on;
          gzip_min_length   1k;
          include /etc/nginx/conf.d/*.conf;
      }
    path: /home/nginx.conf
    owner: root:root
    permissions: '0644'
  - content: |
      -----BEGIN RSA PRIVATE KEY-----
      Mx
      deleted
      -----END RSA PRIVATE KEY-----
    path: /home/private.pem
    owner: root:root
    permissions: '0644'
  - content: |
      <?php
      //
      // deleted
    path: /home/config.php
    owner: root:root
    permissions: '0644'
  - content: |
      <?php

      // Base
      // deleted
    path: /home/config2.php
    owner: root:root
    permissions: '0644'
  - content: |
      -----BEGIN RSA PRIVATE KEY-----
      Mx
      -----END RSA PRIVATE KEY-----
    path: /home/private_x.pem
    owner: root:root
    permissions: '0644'
  - content: |
      ; PHP-FPM
      [program:php-fpm]
      command=/usr/sbin/php-fpm8.1 -F -c /etc/php/8.1/fpm/pool.d/www.conf
      stdout_logfile=/var/log/supervisor/php-fpm-program.log
      stdout_logfile_maxbytes=25MB
      redirect_stderr=true
      stdout-encoding=utf-8
    path: /home/supervisor-phpfpm.conf
    owner: root:root
    permissions: '0644'
  - content: |
      ; NGINX
      [program:nginx]
      command=/usr/sbin/nginx -g "daemon off;"
      autostart=true
      autorestart=true
      startretries=5
      numprocs=1
      startsecs=0
      stdout_logfile=/var/log/supervisor/nginx-program.log
      stdout_logfile_maxbytes=25MB
      redirect_stderr=true
    path: /home/supervisor-nginx.conf
    owner: root:root
    permissions: '0644'
  - content: |
      ssh-rsa AAx xxx@xxx.ru
    path: /home/xxx_gitlabci.pub
    owner: root:root
    permissions: '0600'
  - content: |
      ; Start a new pool named 'www'.
      ; the variable $pool can be used in any directive and will be replaced by the
      ; pool name ('www' here)
      [www]

      ; Per pool prefix
      ; It only applies on the following directives:
      ; - 'access.log'
      ; - 'slowlog'
      ; - 'listen' (unixsocket)
      ; - 'chroot'
      ; - 'chdir'
      ; - 'php_values'
      ; - 'php_admin_values'
      ; When not set, the global prefix (or /usr) applies instead.
      ; Note: This directive can also be relative to the global prefix.
      ; Default Value: none
      ;prefix = /path/to/pools/$pool

      ; Unix user/group of processes
      ; Note: The user is mandatory. If the group is not set, the default user's group
      ;       will be used.
      user = www-data
      group = www-data

      ; The address on which to accept FastCGI requests.
      ; Valid syntaxes are:
      ;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific IPv4 address on
      ;                            a specific port;
      ;   '[ip:6:addr:ess]:port' - to listen on a TCP socket to a specific IPv6 address on
      ;                            a specific port;
      ;   'port'                 - to listen on a TCP socket to all addresses
      ;                            (IPv6 and IPv4-mapped) on a specific port;
      ;   '/path/to/unix/socket' - to listen on a unix socket.
      ; Note: This value is mandatory.

      listen = /run/php/php8.1-fpm.sock
      ;listen = 9000

      ; Set listen(2) backlog.
      ; Default Value: 511 (-1 on FreeBSD and OpenBSD)
      ;listen.backlog = 511

      ; Set permissions for unix socket, if one is used. In Linux, read/write
      ; permissions must be set in order to allow connections from a web server. Many
      ; BSD-derived systems allow connections regardless of permissions.
      ; Default Values: user and group are set as the running user
      ;                 mode is set to 0660
      listen.owner = www-data
      listen.group = www-data
      ;listen.mode = 0660
      ; When POSIX Access Control Lists are supported you can set them using
      ; these options, value is a comma separated list of user/group names.
      ; When set, listen.owner and listen.group are ignored
      ;listen.acl_users =
      ;listen.acl_groups =

      ; List of addresses (IPv4/IPv6) of FastCGI clients which are allowed to connect.
      ; Equivalent to the FCGI_WEB_SERVER_ADDRS environment variable in the original
      ; PHP FCGI (5.2.2+). Makes sense only with a tcp listening socket. Each address
      ; must be separated by a comma. If this value is left blank, connections will be
      ; accepted from any ip address.
      ; Default Value: any
      ;listen.allowed_clients = 127.0.0.1

      ; Specify the nice(2) priority to apply to the pool processes (only if set)
      ; The value can vary from -19 (highest priority) to 20 (lower priority)
      ; Note: - It will only work if the FPM master process is launched as root
      ;       - The pool processes will inherit the master process priority
      ;         unless it specified otherwise
      ; Default Value: no set
      ; process.priority = -19

      ; Set the process dumpable flag (PR_SET_DUMPABLE prctl) even if the process user
      ; or group is differrent than the master process user. It allows to create process
      ; core dump and ptrace the process for the pool user.
      ; Default Value: no
      ; process.dumpable = yes

      ; Choose how the process manager will control the number of child processes.
      ; Possible Values:
      ;   static  - a fixed number (pm.max_children) of child processes;
      ;   dynamic - the number of child processes are set dynamically based on the
      ;             following directives. With this process management, there will be
      ;             always at least 1 children.
      ;             pm.max_children      - the maximum number of children that can
      ;                                    be alive at the same time.
      ;             pm.start_servers     - the number of children created on startup.
      ;             pm.min_spare_servers - the minimum number of children in 'idle'
      ;                                    state (waiting to process). If the number
      ;                                    of 'idle' processes is less than this
      ;                                    number then some children will be created.
      ;             pm.max_spare_servers - the maximum number of children in 'idle'
      ;                                    state (waiting to process). If the number
      ;                                    of 'idle' processes is greater than this
      ;                                    number then some children will be killed.
      ;  ondemand - no children are created at startup. Children will be forked when
      ;             new requests will connect. The following parameter are used:
      ;             pm.max_children           - the maximum number of children that
      ;                                         can be alive at the same time.
      ;             pm.process_idle_timeout   - The number of seconds after which
      ;                                         an idle process will be killed.
      ; Note: This value is mandatory.
      pm = dynamic

      ; The number of child processes to be created when pm is set to 'static' and the
      ; maximum number of child processes when pm is set to 'dynamic' or 'ondemand'.
      ; This value sets the limit on the number of simultaneous requests that will be
      ; served. Equivalent to the ApacheMaxClients directive with mpm_prefork.
      ; Equivalent to the PHP_FCGI_CHILDREN environment variable in the original PHP
      ; CGI. The below defaults are based on a server without much resources. Don't
      ; forget to tweak pm.* to fit your needs.
      ; Note: Used when pm is set to 'static', 'dynamic' or 'ondemand'
      ; Note: This value is mandatory.
      pm.max_children = 225

      ; The number of child processes created on startup.
      ; Note: Used only when pm is set to 'dynamic'
      ; Default Value: min_spare_servers + (max_spare_servers - min_spare_servers) / 2
      pm.start_servers = 4

      ; The desired minimum number of idle server processes.
      ; Note: Used only when pm is set to 'dynamic'
      ; Note: Mandatory when pm is set to 'dynamic'
      pm.min_spare_servers = 3

      ; The desired maximum number of idle server processes.
      ; Note: Used only when pm is set to 'dynamic'
      ; Note: Mandatory when pm is set to 'dynamic'
      pm.max_spare_servers = 5

      ; The number of seconds after which an idle process will be killed.
      ; Note: Used only when pm is set to 'ondemand'
      ; Default Value: 10s
      ;pm.process_idle_timeout = 10s;

      ; The number of requests each child process should execute before respawning.
      ; This can be useful to work around memory leaks in 3rd party libraries. For
      ; endless request processing specify '0'. Equivalent to PHP_FCGI_MAX_REQUESTS.
      ; Default Value: 0
      ;pm.max_requests = 500

      ; The URI to view the FPM status page. If this value is not set, no URI will be
      ; recognized as a status page. It shows the following informations:
      ;   pool                 - the name of the pool;
      ;   process manager      - static, dynamic or ondemand;
      ;   start time           - the date and time FPM has started;
      ;   start since          - number of seconds since FPM has started;
      ;   accepted conn        - the number of request accepted by the pool;
      ;   listen queue         - the number of request in the queue of pending
      ;                          connections (see backlog in listen(2));
      ;   max listen queue     - the maximum number of requests in the queue
      ;                          of pending connections since FPM has started;
      ;   listen queue len     - the size of the socket queue of pending connections;
      ;   idle processes       - the number of idle processes;
      ;   active processes     - the number of active processes;
      ;   total processes      - the number of idle + active processes;
      ;   max active processes - the maximum number of active processes since FPM
      ;                          has started;
      ;   max children reached - number of times, the process limit has been reached,
      ;                          when pm tries to start more children (works only for
      ;                          pm 'dynamic' and 'ondemand');
      ; Value are updated in real time.
      ; Example output:
      ;   pool:                 www
      ;   process manager:      static
      ;   start time:           01/Jul/2011:17:53:49 +0200
      ;   start since:          62636
      ;   accepted conn:        190460
      ;   listen queue:         0
      ;   max listen queue:     1
      ;   listen queue len:     42
      ;   idle processes:       4
      ;   active processes:     11
      ;   total processes:      15
      ;   max active processes: 12
      ;   max children reached: 0
      ;
      ; By default the status page output is formatted as text/plain. Passing either
      ; 'html', 'xml' or 'json' in the query string will return the corresponding
      ; output syntax. Example:
      ;   http://www.foo.bar/status
      ;   http://www.foo.bar/status?json
      ;   http://www.foo.bar/status?html
      ;   http://www.foo.bar/status?xml
      ;
      ; By default the status page only outputs short status. Passing 'full' in the
      ; query string will also return status for each pool process.
      ; Example:
      ;   http://www.foo.bar/status?full
      ;   http://www.foo.bar/status?json&full
      ;   http://www.foo.bar/status?html&full
      ;   http://www.foo.bar/status?xml&full
      ; The Full status returns for each process:
      ;   pid                  - the PID of the process;
      ;   state                - the state of the process (Idle, Running, ...);
      ;   start time           - the date and time the process has started;
      ;   start since          - the number of seconds since the process has started;
      ;   requests             - the number of requests the process has served;
      ;   request duration     - the duration in µs of the requests;
      ;   request method       - the request method (GET, POST, ...);
      ;   request URI          - the request URI with the query string;
      ;   content length       - the content length of the request (only with POST);
      ;   user                 - the user (PHP_AUTH_USER) (or '-' if not set);
      ;   script               - the main script called (or '-' if not set);
      ;   last request cpu     - the %cpu the last request consumed
      ;                          it's always 0 if the process is not in Idle state
      ;                          because CPU calculation is done when the request
      ;                          processing has terminated;
      ;   last request memory  - the max amount of memory the last request consumed
      ;                          it's always 0 if the process is not in Idle state
      ;                          because memory calculation is done when the request
      ;                          processing has terminated;
      ; If the process is in Idle state, then informations are related to the
      ; last request the process has served. Otherwise informations are related to
      ; the current request being served.
      ; Example output:
      ;   ************************
      ;   pid:                  31330
      ;   state:                Running
      ;   start time:           01/Jul/2011:17:53:49 +0200
      ;   start since:          63087
      ;   requests:             12808
      ;   request duration:     1250261
      ;   request method:       GET
      ;   request URI:          /test_mem.php?N=10000
      ;   content length:       0
      ;   user:                 -
      ;   script:               /home/fat/web/docs/php/test_mem.php
      ;   last request cpu:     0.00
      ;   last request memory:  0
      ;
      ; Note: There is a real-time FPM status monitoring sample web page available
      ;       It's available in: /usr/share/php/7.2/fpm/status.html
      ;
      ; Note: The value must start with a leading slash (/). The value can be
      ;       anything, but it may not be a good idea to use the .php extension or it
      ;       may conflict with a real PHP file.
      ; Default Value: not set
      ;pm.status_path = /status

      ; The ping URI to call the monitoring page of FPM. If this value is not set, no
      ; URI will be recognized as a ping page. This could be used to test from outside
      ; that FPM is alive and responding, or to
      ; - create a graph of FPM availability (rrd or such);
      ; - remove a server from a group if it is not responding (load balancing);
      ; - trigger alerts for the operating team (24/7).
      ; Note: The value must start with a leading slash (/). The value can be
      ;       anything, but it may not be a good idea to use the .php extension or it
      ;       may conflict with a real PHP file.
      ; Default Value: not set
      ;ping.path = /ping

      ; This directive may be used to customize the response of a ping request. The
      ; response is formatted as text/plain with a 200 response code.
      ; Default Value: pong
      ;ping.response = pong

      ; The access log file
      ; Default: not set
      ;access.log = log/$pool.access.log

      ; The access log format.
      ; The following syntax is allowed
      ;  %%: the '%' character
      ;  %C: %CPU used by the request
      ;      it can accept the following format:
      ;      - %{user}C for user CPU only
      ;      - %{system}C for system CPU only
      ;      - %{total}C  for user + system CPU (default)
      ;  %d: time taken to serve the request
      ;      it can accept the following format:
      ;      - %{seconds}d (default)
      ;      - %{miliseconds}d
      ;      - %{mili}d
      ;      - %{microseconds}d
      ;      - %{micro}d
      ;  %e: an environment variable (same as $_ENV or $_SERVER)
      ;      it must be associated with embraces to specify the name of the env
      ;      variable. Some exemples:
      ;      - server specifics like: %{REQUEST_METHOD}e or %{SERVER_PROTOCOL}e
      ;      - HTTP headers like: %{HTTP_HOST}e or %{HTTP_USER_AGENT}e
      ;  %f: script filename
      ;  %l: content-length of the request (for POST request only)
      ;  %m: request method
      ;  %M: peak of memory allocated by PHP
      ;      it can accept the following format:
      ;      - %{bytes}M (default)
      ;      - %{kilobytes}M
      ;      - %{kilo}M
      ;      - %{megabytes}M
      ;      - %{mega}M
      ;  %n: pool name
      ;  %o: output header
      ;      it must be associated with embraces to specify the name of the header:
      ;      - %{Content-Type}o
      ;      - %{X-Powered-By}o
      ;      - %{Transfert-Encoding}o
      ;      - ....
      ;  %p: PID of the child that serviced the request
      ;  %P: PID of the parent of the child that serviced the request
      ;  %q: the query string
      ;  %Q: the '?' character if query string exists
      ;  %r: the request URI (without the query string, see %q and %Q)
      ;  %R: remote IP address
      ;  %s: status (response code)
      ;  %t: server time the request was received
      ;      it can accept a strftime(3) format:
      ;      %d/%b/%Y:%H:%M:%S %z (default)
      ;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
      ;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
      ;  %T: time the log has been written (the request has finished)
      ;      it can accept a strftime(3) format:
      ;      %d/%b/%Y:%H:%M:%S %z (default)
      ;      The strftime(3) format must be encapsuled in a %{<strftime_format>}t tag
      ;      e.g. for a ISO8601 formatted timestring, use: %{%Y-%m-%dT%H:%M:%S%z}t
      ;  %u: remote user
      ;
      ; Default: "%R - %u %t \"%m %r\" %s"
      ;access.format = "%R - %u %t \"%m %r%Q%q\" %s %f %{mili}d %{kilo}M %C%%"

      ; The log file for slow requests
      ; Default Value: not set
      ; Note: slowlog is mandatory if request_slowlog_timeout is set
      ;slowlog = log/$pool.log.slow

      ; The timeout for serving a single request after which a PHP backtrace will be
      ; dumped to the 'slowlog' file. A value of '0s' means 'off'.
      ; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
      ; Default Value: 0
      ;request_slowlog_timeout = 0

      ; Depth of slow log stack trace.
      ; Default Value: 20
      ;request_slowlog_trace_depth = 20

      ; The timeout for serving a single request after which the worker process will
      ; be killed. This option should be used when the 'max_execution_time' ini option
      ; does not stop script execution for some reason. A value of '0' means 'off'.
      ; Available units: s(econds)(default), m(inutes), h(ours), or d(ays)
      ; Default Value: 0
      ;request_terminate_timeout = 0

      ; Set open file descriptor rlimit.
      ; Default Value: system defined value
      ;rlimit_files = 1024

      ; Set max core size rlimit.
      ; Possible Values: 'unlimited' or an integer greater or equal to 0
      ; Default Value: system defined value
      ;rlimit_core = 0

      ; Chroot to this directory at the start. This value must be defined as an
      ; absolute path. When this value is not set, chroot is not used.
      ; Note: you can prefix with '$prefix' to chroot to the pool prefix or one
      ; of its subdirectories. If the pool prefix is not set, the global prefix
      ; will be used instead.
      ; Note: chrooting is a great security feature and should be used whenever
      ;       possible. However, all PHP paths will be relative to the chroot
      ;       (error_log, sessions.save_path, ...).
      ; Default Value: not set
      ;chroot =

      ; Chdir to this directory at the start.
      ; Note: relative path can be used.
      ; Default Value: current directory or / when chroot
      ;chdir = /var/www

      ; Redirect worker stdout and stderr into main error log. If not set, stdout and
      ; stderr will be redirected to /dev/null according to FastCGI specs.
      ; Note: on highloaded environement, this can cause some delay in the page
      ; process time (several ms).
      ; Default Value: no
      catch_workers_output = yes

      ; Clear environment in FPM workers
      ; Prevents arbitrary environment variables from reaching FPM worker processes
      ; by clearing the environment in workers before env vars specified in this
      ; pool configuration are added.
      ; Setting to "no" will make all environment variables available to PHP code
      ; via getenv(), $_ENV and $_SERVER.
      ; Default Value: yes
      ;clear_env = no

      ; Limits the extensions of the main script FPM will allow to parse. This can
      ; prevent configuration mistakes on the web server side. You should only limit
      ; FPM to .php extensions to prevent malicious users to use other extensions to
      ; execute php code.
      ; Note: set an empty value to allow all extensions.
      ; Default Value: .php
      ;security.limit_extensions = .php .php3 .php4 .php5 .php7

      ; Pass environment variables like LD_LIBRARY_PATH. All $VARIABLEs are taken from
      ; the current environment.
      ; Default Value: clean env
      ;env[HOSTNAME] = $HOSTNAME
      ;env[PATH] = /usr/local/bin:/usr/bin:/bin
      ;env[TMP] = /tmp
      ;env[TMPDIR] = /tmp
      ;env[TEMP] = /tmp

      ; Additional php.ini defines, specific to this pool of workers. These settings
      ; overwrite the values previously defined in the php.ini. The directives are the
      ; same as the PHP SAPI:
      ;   php_value/php_flag             - you can set classic ini defines which can
      ;                                    be overwritten from PHP call 'ini_set'.
      ;   php_admin_value/php_admin_flag - these directives won't be overwritten by
      ;                                     PHP call 'ini_set'
      ; For php_*flag, valid values are on, off, 1, 0, true, false, yes or no.

      ; Defining 'extension' will load the corresponding shared extension from
      ; extension_dir. Defining 'disable_functions' or 'disable_classes' will not
      ; overwrite previously defined php.ini values, but will append the new value
      ; instead.

      ; Note: path INI options can be relative and will be expanded with the prefix
      ; (pool, global or /usr)

      ; Default Value: nothing is defined by default except the values in php.ini and
      ;                specified at startup with the -d argument
      ;php_admin_value[sendmail_path] = /usr/sbin/sendmail -t -i -f www@my.domain.com
      ;php_flag[display_errors] = off
      php_admin_value[error_log] = /var/log/fpm-php.www.log
      ;php_admin_value[error_log] = /proc/self/fd/2
      ;php_admin_flag[log_errors] = on
      ;php_admin_value[memory_limit] = 32M
      ;error_log = syslog
    path: /home/www.conf
    owner: root:root
    permissions: '0644'
  - content: |
      [PARSER]
          Name   apache
          Format regex
          Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$
          Time_Key time
          Time_Format %d/%b/%Y:%H:%M:%S %z

      [PARSER]
          Name   apache2
          Format regex
          Regex  ^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>.*)")?$
          Time_Key time
          Time_Format %d/%b/%Y:%H:%M:%S %z

      [PARSER]
          Name   apache_error
          Format regex
          Regex  ^\[[^ ]* (?<time>[^\]]*)\] \[(?<level>[^\]]*)\](?: \[pid (?<pid>[^\]]*)\])?( \[client (?<client>[^\]]*)\])? (?<message>.*)$

      [PARSER]
          Name   nginx
          Format regex
          Regex ^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")
          Time_Key time
          Time_Format %d/%b/%Y:%H:%M:%S %z

      [PARSER]
          # https://rubular.com/r/IhIbCAIs7ImOkc
          Name        k8s-nginx-ingress
          Format      regex
          Regex       ^(?<host>[^ ]*) - (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)?" (?<code>[^ ]*) (?<size>[^ ]*) "(?<referer>[^\"]*)" "(?<agent>[^\"]*)" (?<request_length>[^ ]*) (?<request_time>[^ ]*) \[(?<proxy_upstream_name>[^ ]*)\] (\[(?<proxy_alternative_upstream_name>[^ ]*)\] )?(?<upstream_addr>[^ ]*) (?<upstream_response_length>[^ ]*) (?<upstream_response_time>[^ ]*) (?<upstream_status>[^ ]*) (?<reg_id>[^ ]*).*$
          Time_Key    time
          Time_Format %d/%b/%Y:%H:%M:%S %z

      [PARSER]
          Name   json
          Format json
          Time_Key time
          Time_Format %d/%b/%Y:%H:%M:%S %z

      [PARSER]
          Name         docker
          Format       json
          Time_Key     time
          Time_Format  %Y-%m-%dT%H:%M:%S.%L
          Time_Keep    On
          # --
          # Since Fluent Bit v1.2, if you are parsing Docker logs and using
          # the Kubernetes filter, it's not longer required to decode the
          # 'log' key.
          #
          # Command      |  Decoder | Field | Optional Action
          # =============|==================|=================
          #Decode_Field_As    json     log

      [PARSER]
          Name        docker-daemon
          Format      regex
          Regex       time="(?<time>[^ ]*)" level=(?<level>[^ ]*) msg="(?<msg>[^ ].*)"
          Time_Key    time
          Time_Format %Y-%m-%dT%H:%M:%S.%L
          Time_Keep   On

      [PARSER]
          Name        syslog-rfc5424
          Format      regex
          Regex       ^\<(?<pri>[0-9]{1,5})\>1 (?<time>[^ ]+) (?<host>[^ ]+) (?<ident>[^ ]+) (?<pid>[-0-9]+) (?<msgid>[^ ]+) (?<extradata>(\[(.*?)\]|-)) (?<message>.+)$
          Time_Key    time
          Time_Format %Y-%m-%dT%H:%M:%S.%L%z
          Time_Keep   On

      [PARSER]
          Name        syslog-rfc3164-local
          Format      regex
          Regex       ^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$
          Time_Key    time
          Time_Format %b %d %H:%M:%S
          Time_Keep   On

      [PARSER]
          Name        syslog-rfc3164
          Format      regex
          Regex       /^\<(?<pri>[0-9]+)\>(?<time>[^ ]* {1,2}[^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?(?:[^\:]*\:)? *(?<message>.*)$/
          Time_Key    time
          Time_Format %b %d %H:%M:%S
          Time_Keep   On

      [PARSER]
          Name    mongodb
          Format  regex
          Regex   ^(?<time>[^ ]*)\s+(?<severity>\w)\s+(?<component>[^ ]+)\s+\[(?<context>[^\]]+)]\s+(?<message>.*?) *(?<ms>(\d+))?(:?ms)?$
          Time_Format %Y-%m-%dT%H:%M:%S.%L
          Time_Keep   On
          Time_Key time

      [PARSER]
          # https://rubular.com/r/3fVxCrE5iFiZim
          Name    envoy
          Format  regex
          Regex ^\[(?<start_time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*?)(?: +\S*)?)? (?<protocol>\S+)" (?<code>[^ ]*) (?<response_flags>[^ ]*) (?<bytes_received>[^ ]*) (?<bytes_sent>[^ ]*) (?<duration>[^ ]*) (?<x_envoy_upstream_service_time>[^ ]*) "(?<x_forwarded_for>[^ ]*)" "(?<user_agent>[^\"]*)" "(?<request_id>[^\"]*)" "(?<authority>[^ ]*)" "(?<upstream_host>[^ ]*)"  
          Time_Format %Y-%m-%dT%H:%M:%S.%L%z
          Time_Keep   On
          Time_Key start_time

      [PARSER]
          # http://rubular.com/r/tjUt3Awgg4
          Name cri
          Format regex
          Regex ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
          Time_Key    time
          Time_Format %Y-%m-%dT%H:%M:%S.%L%z

      [PARSER]
          Name    kube-custom
          Format  regex
          Regex   (?<tag>[^.]+)?\.?(?<pod_name>[a-z0-9](?:[-a-z0-9]*[a-z0-9])?(?:\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)_(?<namespace_name>[^_]+)_(?<container_name>.+)-(?<docker_id>[a-z0-9]{64})\.log$
    path: /home/parsers.conf
    owner: root:root
    permissions: '0644'
  - content: |
      [SERVICE]
          Flush         1
          Log_File      /var/log/fluentbit/fluentbit.log
          Log_Level     error
          Daemon        off
          Parsers_File  /etc/fluent-bit/parsers.conf
          Plugins_File  /etc/fluent-bit/plugins.conf

      [INPUT]
          Name              tail
          Parser            json
          Path              /var/log/nginx/a*.log
          Tag               xxx.nginxA
          Refresh_Interval  10

      [INPUT]
          Name              tail
          Parser            nginx
          Path              /var/log/nginx/e*.log
          Tag               xxx.nginxE
          Refresh_Interval  10

      [INPUT]
          Name              tail
          Parser            syslog-rfc3164-local
          Path              /var/log/syslog
          Tag               xxx.syslog
          Refresh_Interval  10

      [OUTPUT]
          Name            yc-logging
          Match           xxx.*
          group_id        xxxx
          message_key     log
          level_key       severity
          default_level   INFO
          authorization   instance-service-account
    path: /home/fluent-bit.conf
    owner: root:root
    permissions: '0644'
  - content: |
      [PLUGINS]
          Path /usr/lib/fluent-bit/yc-logging.so
    path: /home/plugins.conf
    owner: root:root
    permissions: '0644'
  - content: |
      #!/bin/sh -u

      # example:
      # sh upload_logs_to_nfs.sh
      #

      # deleted

      #
      # end
      #
    path: /home/upload_frontlogs_to_nfs.sh
    owner: root:root
    permissions: '0644'
  - content: |
      {
        "id": "xxxx",
        "service_account_id":"xxxx",
        "endpoint":"grpcs://lb.xxxx.ydb.mdb.yandexcloud.net:2135",
        "database":"/ru-central1/xxxx/xxx",
        "key_algorithm":"RSA_4096",
        "public_key": "-----BEGIN PUBLIC KEY-----\nMIIxxx=\n-----END PUBLIC KEY-----\n",
        "private_key": "-----BEGIN PRIVATE KEY-----\nMIIxxxxA=\n-----END PRIVATE KEY-----\n"
      }
    path: /home/sa_xxx.json
    owner: root:root
    permissions: '0644'
  - content: |
      #!/bin/sh -u

      # this script is using for prepare xxxfront files from gitlab
      #

      echo -e "<?php\n\
      echo('hello xxx!');\n\
      ?>" > "/home/www/xxxfront/index.php"

      rm -rf "/home/www/gitxxxfront_first_init"
      mkdir -p "/home/www/gitxxxfront_first_init"
      cd "/home/www/gitxxxfront_first_init"
      git clone "https://xxxx:xxxx@gitlab.com/xxxx/xxx.git" "/home/www/gitxxxfront_first_init"
      rsync -a --stats --inplace "/home/www/gitxxxfront_first_init/" "/home/www/xxxfront/releases/now" --exclude=".git" --exclude="scripts" --exclude="gitlab-ci.yml"  --exclude="README.md" 
      mkdir -p "/home/www/xxxfront/releases/now/xxxsss/keys"
      mkdir -p "/home/www/xxxfront/raw/xxxsss/keys"
      mkdir -p "/home/www/xxxfront/releases/now/stat"
      mkdir -p "/home/www/xxxfront/raw/stat"
      
      cp "/home/www/gitxxxfront_first_init/index.php" "/home/www/xxxfront/releases/now/index.php"
      cp "/home/www/gitxxxfront_first_init/index.php" "/home/www/xxxfront/raw/index.php"

      mv "/home/upload_frontlogs_to_nfs.sh" "/home/prepare/upload_frontlogs_to_nfs.sh"
      
      cp "/home/prepare/keys/xxx.pem" "/home/www/xxxfront/raw/xxxsss/keys/xxx.pem"
      mv "/home/prepare/keys/xxx.pem" "/home/www/xxxfront/releases/now/xxxsss/keys/"
      
      cp "/home/prepare/config.php" "/home/www/xxxfront/releases/now/xxxsss/config.php"
      mv "/home/prepare/config.php" "/home/www/xxxfront/raw/xxxsss/"

      cp "/home/prepare/config2.php" "/home/www/xxxfront/releases/now/stat/config.php"
      mv "/home/prepare/config2.php" "/home/www/xxxfront/raw/stat/config.php"

      mkdir -p "/home/www/xxxfront/tmp"
      chown www-data:www-data "/home/www/xxxfront/tmp"

      mv "/home/sa_xxx.json" "/home/www/xxxfront/sa_xxx.json"


      mv "/home/prepare/xxxx.pem" "/home/www/xxxfront/xxx.pem"

      echo '<?php
      echo("Health check: php working!");
      ?>' > "/home/www/xxxfront/releases/now/health.php"

      # need to create user for gitlab deploy processes
      # useradd -m -p <encryptedPassword> -s /bin/bash <user>
      useradd -m -p "xxx" -s /bin/bash xxx_gitlabuser
      mkdir -p "/home/xxx_gitlabuser/.ssh"
      cp "/home/prepare/xxx_gitlabci.pub" "/home/xxx_gitlabuser/.ssh/authorized_keys"
      chown xxx_gitlabuser:xxx_gitlabuser "/home/xxx_gitlabuser/.ssh"
      chown xxx_gitlabuser:xxx_gitlabuser "/home/xxx_gitlabuser/.ssh/authorized_keys"
      sudo adduser xxx_gitlabuser sudo
      echo "xxx_gitlabuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/90-cloud-init-users

      # for adding grpc for working ydb
      echo "extension=grpc.so" >> /etc/php/8.1/cli/php.ini
      echo "extension=grpc.so" >> /etc/php/8.1/fpm/php.ini


      service php8.1-fpm start
      service nginx start
      # service supervisor stop
      # /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf

      # fluentd-bit
      # curl -fsSL https://toolbelt.treasuredata.com/sh/install-ubuntu-jammy-td-agent4.sh | sh
      # systemctl start td-agent.service
      curl https://packages.fluentbit.io/fluentbit.key | gpg --dearmor > /usr/share/keyrings/fluentbit-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/fluentbit-keyring.gpg] https://packages.fluentbit.io/ubuntu/jammy jammy main" >> /etc/apt/sources.list
      apt-get update
      apt-get install fluent-bit

      # yandex plugin
      cd /home/prepare/
      git clone https://github.com/yandex-cloud/fluent-bit-plugin-yandex.git
      cd fluent-bit-plugin-yandex/
      GOCACHE='/tmp' GOMODCACHE=/root/go/pkg/mod fluent_bit_version=1.9.7 plugin_version=dev fluent_bit_version=1.9.7 plugin_version=dev CGO_ENABLED=1 /usr/bin/go build     -buildmode=c-shared -o ./yc-logging.so -ldflags "-X main.PluginVersion=${plugin_version}" -ldflags "-X main.FluentBitVersion=${fluent_bit_version}"
      mkdir -p /usr/lib/fluent-bit/
      cp /home/prepare/fluent-bit-plugin-yandex/yc-logging.so /usr/lib/fluent-bit/yc-logging.so

      # mysql yandex cert
      wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" --output-document "/home/www/xxxfront/yandex_root.crt"
      chmod 0600 "/home/www/xxxfront/yandex_root.crt"
      chown www-data:www-data "/home/www/xxxfront/yandex_root.crt"

      # fluent configs
      mkdir -p /var/log/fluentbit/
      rm -f /etc/fluent-bit/plugins.conf
      rm -f /etc/fluent-bit/fluent-bit.conf
      rm -f /etc/fluent-bit/parsers.conf
      mv /home/prepare/plugins.conf /etc/fluent-bit/
      mv /home/prepare/fluent-bit.conf /etc/fluent-bit/
      mv /home/prepare/parsers.conf /etc/fluent-bit/
      systemctl restart fluent-bit
      systemctl restart nginx
      systemctl restart php8.1-fpm

      rm -f /home/config.php
      rm -f /home/prepare/config.php
      rm -f /home/put_s3_obj_cli.sh
      rm -f /home/supervisor-phpfpm.conf
      rm -f /home/supervisor-nginx.conf
      rm -f /home/www.conf
      rm -f /home/delete_old_log_files.sh
      rm -f /home/xxxfront.conf
      rm -f /home/nginx.conf
      rm -f /home/xxx.pem
      rm -rf /home/prepare/keys/
      rm -f /home/entry.sh
    path: /home/entry.sh
    owner: root:root
    permissions: '0755'
runcmd:
  - mkdir -p /home/www/xxxfront/releases/now/xxxsss/keys
  - mkdir -p /home/www/xxxfront/raw
  - mkdir -p /home/www/xxxfront/repo
  - ln -sf /home/www/xxxfront/releases/now /home/www/xxxfront/current
  - mkdir -p /home/prepare/sh
  - mkdir -p /home/prepare/keys
  - ln -snf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
  - echo "Europe/Moscow" > /etc/timezone
  - mkdir -p ~/.ssh/
  - ssh-keyscan "gitlab.com" >> ~/.ssh/known_hosts
  # deleted a lot of
  # - Its monitoring agent for yandex monitoring
  - wget -O - https://monitoring.api.cloud.yandex.net/monitoring/v2/unifiedAgent/config/install.sh | bash
  - pecl install grpc
  - /bin/sh /home/entry.sh

